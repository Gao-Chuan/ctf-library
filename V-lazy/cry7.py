from gmpy2 import mpz, invert

p = 104511971951616320160148666574721782408766328200427184933043851832305954380344799891475856798131197755549741513061517056330110655871888752986310057365864330756766789747466466755705851020191246211787248032418252194799598699023713628960562323363662219398686713028844843442738934865503955939387730900171793461633
q = 868791979004278170901360309292638081763621402659
g = 160171783009597257485020469569476339437883086214440125708018123933644944481790702683746036779966204500057231025161867545696148150384774128684233033613528497241649922316888823659354635024814574313054619591613703891798047812945242237602920958840012026330266282821050702760402977019573986308256157575276153100247
k = "?"
x = "?"

def data_to_int(s):
	return int(s.encode('hex'), 16)


def SHA1(data):
	return data_to_int(hashlib.sha1(data).hexdigest())


def encrypt(data, p, q, g, x, k):
	r = pow(g, k, p) % q
	s = (invert(k, q) * (SHA1(data) + x * r)) % q
	return (r, s)

data1 = "test1"
data2 = "test2"
(r1, s1) = encrypt(data1, p, q, g, x, k)
(r2, s2) = encrypt(data2, p, q, g, x, k)

print SHA1(data1)
print SHA1(data2)
print s1
print s2
print r1
print r2
"""
819383997537706641891343687813066751094748356189840662235522011360199317363469990176140626911587
410413019993461369777631192716087417746021306304579760175301580100841481646368566510838475075942
303133749386237574596834684512957658866160567877
344197936621037772219318273836742164563063868385
426552270651788925511955716033243390062924955501
426552270651788925511955716033243390062924955501
"""

def getflag(data):
	if data == "getflag":
		(r, s) = encrypt(data, p, q, g, x, k)
		flag = "hctf{" + str(s % r) + "}"
		print flag
